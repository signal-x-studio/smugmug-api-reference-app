"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[461],{6152:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"implementation/react-patterns","title":"React Component Patterns","description":"This project demonstrates modern React patterns with TypeScript, showcasing how to build maintainable, type-safe applications with proper state management and component architecture.","source":"@site/docs/implementation/react-patterns.md","sourceDirName":"implementation","slug":"/implementation/react-patterns","permalink":"/smugmug-api-reference-app/implementation/react-patterns","draft":false,"unlisted":false,"editUrl":"https://github.com/signal-x-studio/smugmug-api-reference-app/tree/main/docs-site/docs/implementation/react-patterns.md","tags":[],"version":"current","lastUpdatedBy":null,"lastUpdatedAt":null,"sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"AI Integration Patterns","permalink":"/smugmug-api-reference-app/implementation/ai-integration"},"next":{"title":"Service Layer Architecture","permalink":"/smugmug-api-reference-app/implementation/service-layer"}}');var a=n(4848),s=n(8453);const r={sidebar_position:2},i="React Component Patterns",c={},l=[{value:"Centralized State Management",id:"centralized-state-management",level:2},{value:"State Architecture",id:"state-architecture",level:3},{value:"Props Down, Events Up Pattern",id:"props-down-events-up-pattern",level:3},{value:"TypeScript Integration Patterns",id:"typescript-integration-patterns",level:2},{value:"Strict Type Safety",id:"strict-type-safety",level:3},{value:"Component Props with Defaults",id:"component-props-with-defaults",level:3},{value:"Custom Hook Patterns",id:"custom-hook-patterns",level:2},{value:"State Management Hooks",id:"state-management-hooks",level:3},{value:"AI Service Integration Hook",id:"ai-service-integration-hook",level:3},{value:"Component Composition Patterns",id:"component-composition-patterns",level:2},{value:"Higher-Order Components for Loading States",id:"higher-order-components-for-loading-states",level:3},{value:"Compound Components Pattern",id:"compound-components-pattern",level:3},{value:"Usage Example",id:"usage-example",level:3},{value:"Performance Optimization Patterns",id:"performance-optimization-patterns",level:2},{value:"Memoization for Expensive Operations",id:"memoization-for-expensive-operations",level:3},{value:"Callback Optimization",id:"callback-optimization",level:3},{value:"Error Boundary Patterns",id:"error-boundary-patterns",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"react-component-patterns",children:"React Component Patterns"})}),"\n",(0,a.jsx)(t.p,{children:"This project demonstrates modern React patterns with TypeScript, showcasing how to build maintainable, type-safe applications with proper state management and component architecture."}),"\n",(0,a.jsx)(t.h2,{id:"centralized-state-management",children:"Centralized State Management"}),"\n",(0,a.jsxs)(t.p,{children:["The application uses a ",(0,a.jsx)(t.strong,{children:"single source of truth"})," pattern with all state managed in ",(0,a.jsx)(t.code,{children:"App.tsx"}),", avoiding the complexity of external state management libraries for this scale of application."]}),"\n",(0,a.jsx)(t.h3,{id:"state-architecture",children:"State Architecture"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"// App.tsx - Centralized state management\nconst App: React.FC = () => {\n  // Core application state\n  const [photos, setPhotos] = useState<Photo[]>([]);\n  const [selectedAlbum, setSelectedAlbum] = useState<Album | null>(null);\n  const [selectedPhoto, setSelectedPhoto] = useState<Photo | null>(null);\n  \n  // UI state\n  const [isLoading, setIsLoading] = useState<'albums' | 'photos' | 'syncing' | false>(false);\n  const [viewMode, setViewMode] = useState<'all' | 'review'>('all');\n  \n  // Settings state\n  const [customInstructions, setCustomInstructions] = useState('');\n  const [automationMode, setAutomationMode] = useState<AutomationMode>('off');\n  \n  // Notifications and activity\n  const [notifications, setNotifications] = useState<AppNotification[]>([]);\n  const [activityLog, setActivityLog] = useState<ActivityLogEntry[]>([]);\n  \n  // ... component logic\n};\n"})}),"\n",(0,a.jsx)(t.h3,{id:"props-down-events-up-pattern",children:"Props Down, Events Up Pattern"}),"\n",(0,a.jsx)(t.p,{children:"Data flows down through props, events bubble up through callbacks:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"// Parent passes data down and callbacks up\n<ImageGrid\n  photos={filteredPhotos}\n  onPhotoClick={handlePhotoClick}\n  onBatchSelect={handleBatchPhotoSelection}\n  onMetadataGenerate={handleSinglePhotoMetadata}\n  selectedPhotoIds={selectedPhotoIds}\n  viewMode={viewMode}\n/>\n\n// Child component receives props and calls callbacks\ninterface ImageGridProps {\n  photos: Photo[];\n  onPhotoClick: (photo: Photo) => void;\n  onBatchSelect: (photoIds: string[]) => void;\n  onMetadataGenerate: (photoId: string) => void;\n  selectedPhotoIds: string[];\n  viewMode: 'all' | 'review';\n}\n"})}),"\n",(0,a.jsx)(t.h2,{id:"typescript-integration-patterns",children:"TypeScript Integration Patterns"}),"\n",(0,a.jsx)(t.h3,{id:"strict-type-safety",children:"Strict Type Safety"}),"\n",(0,a.jsx)(t.p,{children:"All components use strict TypeScript with proper interface definitions:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"// types.ts - Centralized type definitions\nexport interface Photo {\n  id: string;\n  title: string;\n  filename: string;\n  url: string;\n  thumbnailUrl: string;\n  uploadDate: string;\n  aiData?: AiData;\n  status: PhotoStatus;\n}\n\nexport interface AiData {\n  title?: string;\n  description?: string;\n  keywords?: string[];\n  technicalDetails?: TechnicalDetails;\n  suggestedAlbums?: string[];\n  confidence?: number;\n}\n\nexport enum PhotoStatus {\n  Uploaded = 'uploaded',\n  Processing = 'processing', \n  AIProcessed = 'ai_processed',\n  ReviewNeeded = 'review_needed',\n  Approved = 'approved'\n}\n"})}),"\n",(0,a.jsx)(t.h3,{id:"component-props-with-defaults",children:"Component Props with Defaults"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"// PhotoCard.tsx - Props with proper types and optional values\ninterface PhotoCardProps {\n  photo: Photo;\n  onPhotoClick: (photo: Photo) => void;\n  onMetadataGenerate?: (photoId: string) => void;\n  showAIMetadata?: boolean;\n  isSelected?: boolean;\n  className?: string;\n}\n\nconst PhotoCard: React.FC<PhotoCardProps> = ({\n  photo,\n  onPhotoClick,\n  onMetadataGenerate,\n  showAIMetadata = true,\n  isSelected = false,\n  className = ''\n}) => {\n  // Component implementation with type-safe props\n};\n"})}),"\n",(0,a.jsx)(t.h2,{id:"custom-hook-patterns",children:"Custom Hook Patterns"}),"\n",(0,a.jsx)(t.h3,{id:"state-management-hooks",children:"State Management Hooks"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"// hooks/useNotifications.ts\nexport const useNotifications = () => {\n  const [notifications, setNotifications] = useState<AppNotification[]>([]);\n  \n  const showNotification = useCallback((\n    type: 'success' | 'error' | 'info',\n    message: string,\n    duration: number = 5000\n  ) => {\n    const notification: AppNotification = {\n      id: Date.now().toString(),\n      type,\n      message,\n      timestamp: new Date().toISOString()\n    };\n    \n    setNotifications(prev => [...prev, notification]);\n    \n    // Auto-remove after duration\n    setTimeout(() => {\n      setNotifications(prev => prev.filter(n => n.id !== notification.id));\n    }, duration);\n  }, []);\n  \n  const removeNotification = useCallback((id: string) => {\n    setNotifications(prev => prev.filter(n => n.id !== id));\n  }, []);\n  \n  return { notifications, showNotification, removeNotification };\n};\n"})}),"\n",(0,a.jsx)(t.h3,{id:"ai-service-integration-hook",children:"AI Service Integration Hook"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"// hooks/usePhotoMetadata.ts\nexport const usePhotoMetadata = (apiKey: string) => {\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  \n  const generateMetadata = useCallback(async (\n    photo: File | Photo,\n    customInstructions: string = ''\n  ) => {\n    if (!apiKey) {\n      throw new Error('API key is required for metadata generation');\n    }\n    \n    setIsGenerating(true);\n    setError(null);\n    \n    try {\n      let imageFile: File;\n      \n      // Handle both File objects and Photo objects\n      if (photo instanceof File) {\n        imageFile = photo;\n      } else {\n        // Convert Photo URL to File (for existing photos)\n        imageFile = await urlToFile(photo.url, photo.filename);\n      }\n      \n      const metadata = await generatePhotoMetadata(imageFile, customInstructions, apiKey);\n      return metadata;\n      \n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Unknown error';\n      setError(errorMessage);\n      throw err;\n    } finally {\n      setIsGenerating(false);\n    }\n  }, [apiKey]);\n  \n  return { generateMetadata, isGenerating, error };\n};\n"})}),"\n",(0,a.jsx)(t.h2,{id:"component-composition-patterns",children:"Component Composition Patterns"}),"\n",(0,a.jsx)(t.h3,{id:"higher-order-components-for-loading-states",children:"Higher-Order Components for Loading States"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:'// components/withLoadingState.tsx\ninterface WithLoadingStateProps {\n  isLoading: boolean;\n  loadingMessage?: string;\n  children: React.ReactNode;\n}\n\nconst WithLoadingState: React.FC<WithLoadingStateProps> = ({\n  isLoading,\n  loadingMessage = \'Loading...\',\n  children\n}) => {\n  if (isLoading) {\n    return (\n      <div className="flex items-center justify-center p-8">\n        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>\n        <span className="ml-3 text-gray-600">{loadingMessage}</span>\n      </div>\n    );\n  }\n  \n  return <>{children}</>;\n};\n'})}),"\n",(0,a.jsx)(t.h3,{id:"compound-components-pattern",children:"Compound Components Pattern"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:'// components/Modal/index.tsx\ninterface ModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  children: React.ReactNode;\n}\n\nconst Modal: React.FC<ModalProps> = ({ isOpen, onClose, children }) => {\n  if (!isOpen) return null;\n  \n  return (\n    <div className="fixed inset-0 z-50 overflow-auto bg-black bg-opacity-50">\n      <div className="relative p-8 bg-white max-w-2xl mx-auto mt-20 rounded-lg">\n        {children}\n      </div>\n    </div>\n  );\n};\n\n// Compound components for modal sections\nModal.Header = ({ children }: { children: React.ReactNode }) => (\n  <div className="mb-4 pb-4 border-b">\n    {children}\n  </div>\n);\n\nModal.Body = ({ children }: { children: React.ReactNode }) => (\n  <div className="mb-6">\n    {children}\n  </div>\n);\n\nModal.Footer = ({ children }: { children: React.ReactNode }) => (\n  <div className="flex justify-end space-x-3 pt-4 border-t">\n    {children}\n  </div>\n);\n'})}),"\n",(0,a.jsx)(t.h3,{id:"usage-example",children:"Usage Example"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:'// Using compound modal components\n<Modal isOpen={isPhotoDetailOpen} onClose={() => setSelectedPhoto(null)}>\n  <Modal.Header>\n    <h2 className="text-xl font-semibold">{selectedPhoto?.title}</h2>\n  </Modal.Header>\n  \n  <Modal.Body>\n    <PhotoDetailView photo={selectedPhoto} />\n  </Modal.Body>\n  \n  <Modal.Footer>\n    <button onClick={handleGenerateMetadata}>Generate AI Metadata</button>\n    <button onClick={() => setSelectedPhoto(null)}>Close</button>\n  </Modal.Footer>\n</Modal>\n'})}),"\n",(0,a.jsx)(t.h2,{id:"performance-optimization-patterns",children:"Performance Optimization Patterns"}),"\n",(0,a.jsx)(t.h3,{id:"memoization-for-expensive-operations",children:"Memoization for Expensive Operations"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"// Memoized filtering for large photo sets\nconst filteredPhotos = useMemo(() => {\n  if (viewMode === 'all') return photos;\n  \n  return photos.filter(photo => \n    photo.status === PhotoStatus.ReviewNeeded ||\n    photo.status === PhotoStatus.Processing\n  );\n}, [photos, viewMode]);\n\n// Memoized computed values\nconst photoStats = useMemo(() => {\n  const total = photos.length;\n  const processed = photos.filter(p => p.aiData).length;\n  const needsReview = photos.filter(p => p.status === PhotoStatus.ReviewNeeded).length;\n  \n  return { total, processed, needsReview };\n}, [photos]);\n"})}),"\n",(0,a.jsx)(t.h3,{id:"callback-optimization",children:"Callback Optimization"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:"// Stable callback references with useCallback\nconst handlePhotoClick = useCallback((photo: Photo) => {\n  setSelectedPhoto(photo);\n}, []);\n\nconst handleBatchMetadataGeneration = useCallback(async (photoIds: string[]) => {\n  setIsLoading('syncing');\n  \n  const photosToProcess = photos.filter(p => photoIds.includes(p.id));\n  \n  try {\n    const results = await batchProcessPhotos(photosToProcess, aiSettings, (processed, total) => {\n      // Progress callback\n      setProcessingProgress({ processed, total });\n    });\n    \n    // Update photos with new metadata\n    setPhotos(prev => prev.map(photo => {\n      const result = results.find(r => r.photo.id === photo.id);\n      return result?.success \n        ? { ...photo, aiData: result.metadata, status: PhotoStatus.AIProcessed }\n        : photo;\n    }));\n    \n  } catch (error) {\n    showNotification('error', `Batch processing failed: ${error.message}`);\n  } finally {\n    setIsLoading(false);\n  }\n}, [photos, aiSettings, showNotification]);\n"})}),"\n",(0,a.jsx)(t.h2,{id:"error-boundary-patterns",children:"Error Boundary Patterns"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-typescript",children:'// components/ErrorBoundary.tsx\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error: Error | null;\n}\n\nclass ErrorBoundary extends React.Component<\n  React.PropsWithChildren<{}>, \n  ErrorBoundaryState\n> {\n  constructor(props: React.PropsWithChildren<{}>) {\n    super(props);\n    this.state = { hasError: false, error: null };\n  }\n  \n  static getDerivedStateFromError(error: Error): ErrorBoundaryState {\n    return { hasError: true, error };\n  }\n  \n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error(\'Error caught by boundary:\', error, errorInfo);\n  }\n  \n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className="p-8 text-center">\n          <h2 className="text-xl font-semibold text-red-600 mb-4">\n            Something went wrong\n          </h2>\n          <p className="text-gray-600 mb-4">\n            {this.state.error?.message || \'An unexpected error occurred\'}\n          </p>\n          <button \n            onClick={() => window.location.reload()}\n            className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"\n          >\n            Reload Page\n          </button>\n        </div>\n      );\n    }\n    \n    return this.props.children;\n  }\n}\n'})}),"\n",(0,a.jsx)(t.p,{children:"These patterns provide a solid foundation for building maintainable, performant React applications with proper TypeScript integration and modern development practices."}),"\n",(0,a.jsx)(t.hr,{}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.strong,{children:"Next"}),": Learn about the ",(0,a.jsx)(t.a,{href:"./service-layer",children:"service layer architecture"})," that powers the AI integration."]})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>i});var o=n(6540);const a={},s=o.createContext(a);function r(e){const t=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);
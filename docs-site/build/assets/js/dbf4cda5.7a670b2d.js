"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[296],{7427:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"agent-native/implementation-guide","title":"Implementation Guide","description":"Transform your application into an agent-native experience with this comprehensive implementation guide. Learn how to add dual interfaces that work seamlessly for both human users and AI agents.","source":"@site/docs/agent-native/implementation-guide.md","sourceDirName":"agent-native","slug":"/agent-native/implementation-guide","permalink":"/smugmug-api-reference-app/agent-native/implementation-guide","draft":false,"unlisted":false,"editUrl":"https://github.com/signal-x-studio/smugmug-api-reference-app/tree/main/docs-site/docs/agent-native/implementation-guide.md","tags":[],"version":"current","lastUpdatedBy":null,"lastUpdatedAt":null,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Interactive Examples","permalink":"/smugmug-api-reference-app/agent-native/interactive-examples"},"next":{"title":"AI Integration Patterns","permalink":"/smugmug-api-reference-app/implementation/ai-integration"}}');var s=t(4848),a=t(8453);const r={},o="Implementation Guide",c={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Quick Start: 30-Minute Agent-Native Setup",id:"quick-start-30-minute-agent-native-setup",level:2},{value:"Step 1: Install Dependencies (5 minutes)",id:"step-1-install-dependencies-5-minutes",level:3},{value:"Step 2: Create Agent Infrastructure (10 minutes)",id:"step-2-create-agent-infrastructure-10-minutes",level:3},{value:"Step 3: Add Basic Actions (10 minutes)",id:"step-3-add-basic-actions-10-minutes",level:3},{value:"Step 4: Expose Global Interface (5 minutes)",id:"step-4-expose-global-interface-5-minutes",level:3},{value:"Complete Implementation Guide",id:"complete-implementation-guide",level:2},{value:"Phase 1: Core Infrastructure (1-2 hours)",id:"phase-1-core-infrastructure-1-2-hours",level:3},{value:"1.1 Action Registry System",id:"11-action-registry-system",level:4},{value:"1.2 State Management System",id:"12-state-management-system",level:4},{value:"1.3 Natural Language Processing",id:"13-natural-language-processing",level:4},{value:"Phase 2: Component Integration (2-3 hours)",id:"phase-2-component-integration-2-3-hours",level:3},{value:"2.1 Schema.org Markup Integration",id:"21-schemaorg-markup-integration",level:4},{value:"2.2 State Synchronization Hooks",id:"22-state-synchronization-hooks",level:4},{value:"2.3 Action Integration Hooks",id:"23-action-integration-hooks",level:4},{value:"Phase 3: Advanced Features (3-4 hours)",id:"phase-3-advanced-features-3-4-hours",level:3},{value:"3.1 Multi-Modal Input Support",id:"31-multi-modal-input-support",level:4},{value:"3.2 Performance Optimization",id:"32-performance-optimization",level:4},{value:"Testing Your Agent-Native Implementation",id:"testing-your-agent-native-implementation",level:2},{value:"Unit Tests",id:"unit-tests",level:3},{value:"Integration Tests",id:"integration-tests",level:3},{value:"Deployment Considerations",id:"deployment-considerations",level:2},{value:"Performance Monitoring",id:"performance-monitoring",level:3},{value:"Security Considerations",id:"security-considerations",level:3},{value:"Best Practices Summary",id:"best-practices-summary",level:2},{value:"1. Design for Dual Use",id:"1-design-for-dual-use",level:3},{value:"2. Error Handling",id:"2-error-handling",level:3},{value:"3. Performance",id:"3-performance",level:3},{value:"4. Security",id:"4-security",level:3},{value:"5. User Experience",id:"5-user-experience",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"implementation-guide",children:"Implementation Guide"})}),"\n",(0,s.jsx)(n.p,{children:"Transform your application into an agent-native experience with this comprehensive implementation guide. Learn how to add dual interfaces that work seamlessly for both human users and AI agents."}),"\n",(0,s.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsx)(n.p,{children:"Before implementing agent-native features, ensure you have:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"React 18+"})," or equivalent modern frontend framework"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"TypeScript"})," (recommended for type safety)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Basic understanding"})," of Schema.org markup"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Existing application"})," with user interactions to expose"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"quick-start-30-minute-agent-native-setup",children:"Quick Start: 30-Minute Agent-Native Setup"}),"\n",(0,s.jsx)(n.h3,{id:"step-1-install-dependencies-5-minutes",children:"Step 1: Install Dependencies (5 minutes)"}),"\n",(0,s.jsx)(n.p,{children:"No additional dependencies are required! Agent-native features use standard web APIs and existing React patterns."}),"\n",(0,s.jsx)(n.h3,{id:"step-2-create-agent-infrastructure-10-minutes",children:"Step 2: Create Agent Infrastructure (10 minutes)"}),"\n",(0,s.jsx)(n.p,{children:"Create the core agent infrastructure files:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/agents/types.ts\nexport interface AgentAction {\n  id: string;\n  name: string;\n  description: string;\n  category: string;\n  parameters: Record<string, any>;\n  execute: (params: any) => Promise<any>;\n  permissions?: string[];\n  examples?: Array<{\n    description: string;\n    parameters: any;\n  }>;\n}\n\nexport interface AgentState {\n  [key: string]: any;\n}\n\nexport interface NLPResult {\n  intent: string;\n  parameters: Record<string, any>;\n  confidence: number;\n  entities: Record<string, any[]>;\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/agents/registry.ts\nimport { AgentAction } from './types';\n\nclass AgentActionRegistry {\n  private actions: Map<string, AgentAction> = new Map();\n\n  register(action: AgentAction): void {\n    this.actions.set(action.id, action);\n  }\n\n  get(actionId: string): AgentAction | undefined {\n    return this.actions.get(actionId);\n  }\n\n  getAll(): AgentAction[] {\n    return Array.from(this.actions.values());\n  }\n\n  getByCategory(category: string): AgentAction[] {\n    return this.getAll().filter(action => action.category === category);\n  }\n\n  async execute(actionId: string, parameters: any): Promise<any> {\n    const action = this.get(actionId);\n    if (!action) {\n      throw new Error(`Action ${actionId} not found`);\n    }\n\n    // Validate parameters (implement validation logic)\n    // Execute action with error handling\n    try {\n      return await action.execute(parameters);\n    } catch (error) {\n      throw new Error(`Action execution failed: ${error.message}`);\n    }\n  }\n}\n\nexport const agentRegistry = new AgentActionRegistry();\n"})}),"\n",(0,s.jsx)(n.h3,{id:"step-3-add-basic-actions-10-minutes",children:"Step 3: Add Basic Actions (10 minutes)"}),"\n",(0,s.jsx)(n.p,{children:"Register your first agent actions:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/agents/actions/photo-actions.ts\nimport { agentRegistry } from '../registry';\n\n// Register filter photos action\nagentRegistry.register({\n  id: 'filterPhotos',\n  name: 'Filter Photos',\n  description: 'Filter photos by keywords, date range, and other criteria',\n  category: 'photos',\n  parameters: {\n    keywords: { type: 'array', description: 'Keywords to filter by' },\n    dateRange: { type: 'object', description: 'Date range filter' },\n    limit: { type: 'number', default: 100, description: 'Max results' }\n  },\n  async execute(params) {\n    // Implement your existing filter logic here\n    return await filterPhotosImpl(params);\n  },\n  examples: [{\n    description: 'Find sunset photos from summer',\n    parameters: {\n      keywords: ['sunset'],\n      dateRange: { start: '2023-06-01', end: '2023-08-31' },\n      limit: 20\n    }\n  }]\n});\n\n// Register create album action\nagentRegistry.register({\n  id: 'createAlbum',\n  name: 'Create Album',\n  description: 'Create a new photo album',\n  category: 'albums',\n  parameters: {\n    name: { type: 'string', required: true },\n    description: { type: 'string' },\n    photos: { type: 'array', description: 'Photo IDs to include' }\n  },\n  async execute(params) {\n    // Implement your album creation logic\n    return await createAlbumImpl(params);\n  }\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"step-4-expose-global-interface-5-minutes",children:"Step 4: Expose Global Interface (5 minutes)"}),"\n",(0,s.jsx)(n.p,{children:"Make actions available to AI agents:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/agents/global-interface.ts\nimport { agentRegistry } from './registry';\n\n// Expose agent actions globally\ndeclare global {\n  interface Window {\n    agentActions: {\n      [key: string]: (params: any) => Promise<any>;\n    } & {\n      getRegistry: () => any;\n      execute: (actionId: string, params: any) => Promise<any>;\n    };\n    agentState: any;\n    nlpProcessor: any;\n  }\n}\n\n// Initialize global agent interface\nexport function initializeAgentInterface() {\n  // Create dynamic action methods\n  const actionMethods: any = {};\n  \n  for (const action of agentRegistry.getAll()) {\n    actionMethods[action.id] = async (params: any) => {\n      return await agentRegistry.execute(action.id, params);\n    };\n  }\n\n  // Add utility methods\n  actionMethods.getRegistry = () => agentRegistry.getAll();\n  actionMethods.execute = (actionId: string, params: any) => \n    agentRegistry.execute(actionId, params);\n\n  window.agentActions = actionMethods;\n  \n  console.log('\u2705 Agent interface initialized');\n}\n\n// Call this in your app initialization\ninitializeAgentInterface();\n"})}),"\n",(0,s.jsx)(n.h2,{id:"complete-implementation-guide",children:"Complete Implementation Guide"}),"\n",(0,s.jsx)(n.h3,{id:"phase-1-core-infrastructure-1-2-hours",children:"Phase 1: Core Infrastructure (1-2 hours)"}),"\n",(0,s.jsx)(n.h4,{id:"11-action-registry-system",children:"1.1 Action Registry System"}),"\n",(0,s.jsx)(n.p,{children:"Expand your action registry with advanced features:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/agents/advanced-registry.ts\nimport { EventEmitter } from 'events';\n\nexport class AdvancedAgentRegistry extends EventEmitter {\n  private actions = new Map<string, AgentAction>();\n  private executionHistory: ExecutionRecord[] = [];\n\n  async execute(actionId: string, parameters: any, context?: ExecutionContext): Promise<any> {\n    const startTime = Date.now();\n    const executionId = generateId();\n    \n    this.emit('executionStart', { actionId, parameters, executionId });\n    \n    try {\n      // Parameter validation\n      await this.validateParameters(actionId, parameters);\n      \n      // Permission checking\n      await this.checkPermissions(actionId, context);\n      \n      // Execute action\n      const action = this.actions.get(actionId);\n      const result = await action!.execute(parameters);\n      \n      // Record execution\n      const executionRecord: ExecutionRecord = {\n        id: executionId,\n        actionId,\n        parameters,\n        result,\n        duration: Date.now() - startTime,\n        timestamp: new Date(),\n        success: true\n      };\n      \n      this.executionHistory.push(executionRecord);\n      this.emit('executionComplete', executionRecord);\n      \n      return result;\n      \n    } catch (error) {\n      const executionRecord: ExecutionRecord = {\n        id: executionId,\n        actionId,\n        parameters,\n        error: error.message,\n        duration: Date.now() - startTime,\n        timestamp: new Date(),\n        success: false\n      };\n      \n      this.executionHistory.push(executionRecord);\n      this.emit('executionError', executionRecord);\n      \n      throw error;\n    }\n  }\n\n  private async validateParameters(actionId: string, parameters: any): Promise<void> {\n    const action = this.actions.get(actionId);\n    if (!action) throw new Error(`Unknown action: ${actionId}`);\n    \n    // Implement JSON schema validation\n    // You can use libraries like Ajv for robust validation\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"12-state-management-system",children:"1.2 State Management System"}),"\n",(0,s.jsx)(n.p,{children:"Create a global state system for agent awareness:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/agents/state-manager.ts\nexport class AgentStateManager extends EventEmitter {\n  private state: AgentState = {};\n  private subscribers = new Map<string, Set<Function>>();\n\n  getSnapshot(): AgentState {\n    return { ...this.state };\n  }\n\n  updateState(path: string, value: any): void {\n    const oldValue = this.getValueByPath(path);\n    this.setValueByPath(path, value);\n    \n    this.emit('stateChange', {\n      path,\n      oldValue,\n      newValue: value,\n      timestamp: new Date()\n    });\n\n    // Notify specific subscribers\n    const pathSubscribers = this.subscribers.get(path);\n    if (pathSubscribers) {\n      pathSubscribers.forEach(callback => callback(value, oldValue));\n    }\n  }\n\n  subscribe(path: string, callback: Function): () => void {\n    if (!this.subscribers.has(path)) {\n      this.subscribers.set(path, new Set());\n    }\n    this.subscribers.get(path)!.add(callback);\n\n    // Return unsubscribe function\n    return () => {\n      this.subscribers.get(path)?.delete(callback);\n    };\n  }\n\n  // React hook integration\n  useAgentState<T>(path: string): [T, (value: T) => void] {\n    const [value, setValue] = useState<T>(this.getValueByPath(path));\n\n    useEffect(() => {\n      const unsubscribe = this.subscribe(path, setValue);\n      return unsubscribe;\n    }, [path]);\n\n    const updateValue = useCallback((newValue: T) => {\n      this.updateState(path, newValue);\n    }, [path]);\n\n    return [value, updateValue];\n  }\n}\n\nexport const agentState = new AgentStateManager();\n"})}),"\n",(0,s.jsx)(n.h4,{id:"13-natural-language-processing",children:"1.3 Natural Language Processing"}),"\n",(0,s.jsx)(n.p,{children:"Add basic NLP capabilities:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/agents/nlp-processor.ts\nexport class NLPProcessor {\n  private intentPatterns: IntentPattern[] = [\n    {\n      intent: 'filterPhotos',\n      patterns: [\n        /show me (.*) photos?/i,\n        /find (.*) pictures?/i,\n        /photos? (with|of|from) (.*)/i\n      ],\n      extractParameters: (text: string, match: RegExpMatchArray) => ({\n        keywords: this.extractKeywords(match[1] || match[2]),\n        dateRange: this.extractDateRange(text),\n        location: this.extractLocation(text)\n      })\n    },\n    {\n      intent: 'createAlbum',\n      patterns: [\n        /create (?:an? )?album (?:called |named )?\"([^\"]+)\"/i,\n        /make (?:an? )?album (.*)/i\n      ],\n      extractParameters: (text: string, match: RegExpMatchArray) => ({\n        name: match[1],\n        criteria: this.extractFilterCriteria(text)\n      })\n    }\n  ];\n\n  async classifyIntent(text: string, context?: any): Promise<NLPResult> {\n    const normalizedText = text.toLowerCase().trim();\n    \n    for (const pattern of this.intentPatterns) {\n      for (const regex of pattern.patterns) {\n        const match = normalizedText.match(regex);\n        if (match) {\n          return {\n            intent: pattern.intent,\n            parameters: pattern.extractParameters(text, match),\n            confidence: this.calculateConfidence(match, text),\n            entities: this.extractEntities(text)\n          };\n        }\n      }\n    }\n\n    // Fallback to search if no specific intent matched\n    return {\n      intent: 'searchPhotos',\n      parameters: { query: text },\n      confidence: 0.6,\n      entities: this.extractEntities(text)\n    };\n  }\n\n  private extractKeywords(text: string): string[] {\n    // Remove common words and extract meaningful keywords\n    const stopWords = ['the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by'];\n    return text.toLowerCase()\n      .split(/\\s+/)\n      .filter(word => !stopWords.includes(word) && word.length > 2);\n  }\n\n  private extractDateRange(text: string): DateRange | undefined {\n    const datePatterns = [\n      { pattern: /last (week|month|year)/i, handler: this.getLastPeriod },\n      { pattern: /(\\d{4})/i, handler: this.getYear },\n      { pattern: /(summer|winter|spring|fall|autumn)/i, handler: this.getSeason }\n    ];\n\n    for (const { pattern, handler } of datePatterns) {\n      const match = text.match(pattern);\n      if (match) {\n        return handler(match[1]);\n      }\n    }\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"phase-2-component-integration-2-3-hours",children:"Phase 2: Component Integration (2-3 hours)"}),"\n",(0,s.jsx)(n.h4,{id:"21-schemaorg-markup-integration",children:"2.1 Schema.org Markup Integration"}),"\n",(0,s.jsx)(n.p,{children:"Add structured data to your React components:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/agents/components/AgentWrapper.tsx\ninterface AgentWrapperProps {\n  componentId: string;\n  schemaType: string;\n  data: any;\n  children: React.ReactNode;\n  actions?: string[];\n}\n\nexport function AgentWrapper({ \n  componentId, \n  schemaType, \n  data, \n  children,\n  actions = []\n}: AgentWrapperProps) {\n  const schemaData = useMemo(() => {\n    return generateSchemaOrg(schemaType, data);\n  }, [schemaType, data]);\n\n  const agentAttributes = {\n    'data-agent-type': schemaType,\n    'data-agent-id': componentId,\n    'data-agent-actions': actions.join(','),\n    itemScope: true,\n    itemType: `https://schema.org/${schemaType}`\n  };\n\n  return (\n    <div {...agentAttributes}>\n      <script \n        type=\"application/ld+json\"\n        dangerouslySetInnerHTML={{ __html: JSON.stringify(schemaData) }}\n      />\n      {children}\n    </div>\n  );\n}\n\n// Usage in your components\nfunction PhotoCard({ photo }: { photo: Photo }) {\n  return (\n    <AgentWrapper\n      componentId={`photo-${photo.id}`}\n      schemaType=\"Photograph\"\n      data={photo}\n      actions={['view', 'edit', 'delete', 'share']}\n    >\n      <div className=\"photo-card\">\n        <img src={photo.url} alt={photo.title} itemProp=\"contentUrl\" />\n        <h3 itemProp=\"name\">{photo.title}</h3>\n        <p itemProp=\"description\">{photo.description}</p>\n      </div>\n    </AgentWrapper>\n  );\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"22-state-synchronization-hooks",children:"2.2 State Synchronization Hooks"}),"\n",(0,s.jsx)(n.p,{children:"Create React hooks for agent state integration:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/agents/hooks/useAgentState.ts\nexport function useAgentState<T>(\n  key: string, \n  initialValue: T\n): [T, (value: T) => void] {\n  const [state, setState] = useState<T>(\n    agentState.getSnapshot()[key] ?? initialValue\n  );\n\n  useEffect(() => {\n    // Subscribe to state changes\n    const unsubscribe = agentState.subscribe(key, (newValue: T) => {\n      setState(newValue);\n    });\n\n    return unsubscribe;\n  }, [key]);\n\n  const updateState = useCallback((newValue: T) => {\n    agentState.updateState(key, newValue);\n  }, [key]);\n\n  return [state, updateState];\n}\n\n// Usage in components\nfunction PhotoGallery() {\n  const [selectedPhotos, setSelectedPhotos] = useAgentState<Photo[]>('selectedPhotos', []);\n  const [currentView, setCurrentView] = useAgentState<string>('currentView', 'grid');\n\n  // Your component logic remains the same\n  // Agent state is automatically synchronized\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"23-action-integration-hooks",children:"2.3 Action Integration Hooks"}),"\n",(0,s.jsx)(n.p,{children:"Connect your UI interactions to agent actions:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/agents/hooks/useAgentActions.ts\nexport function useAgentActions() {\n  const executeAction = useCallback(async (\n    actionId: string, \n    parameters: any,\n    options?: { showProgress?: boolean; confirmationRequired?: boolean }\n  ) => {\n    if (options?.confirmationRequired) {\n      const confirmed = await showConfirmationDialog({\n        action: actionId,\n        parameters\n      });\n      if (!confirmed) return;\n    }\n\n    if (options?.showProgress) {\n      showProgressIndicator({ actionId });\n    }\n\n    try {\n      const result = await window.agentActions.execute(actionId, parameters);\n      \n      if (options?.showProgress) {\n        hideProgressIndicator();\n      }\n      \n      return result;\n    } catch (error) {\n      if (options?.showProgress) {\n        hideProgressIndicator();\n      }\n      \n      showErrorMessage({\n        message: `Action failed: ${error.message}`,\n        action: actionId\n      });\n      \n      throw error;\n    }\n  }, []);\n\n  return { executeAction };\n}\n\n// Usage in components\nfunction PhotoManagement() {\n  const { executeAction } = useAgentActions();\n\n  const handleCreateAlbum = async (photos: Photo[]) => {\n    await executeAction('createAlbum', {\n      name: 'New Album',\n      photos: photos.map(p => p.id)\n    }, { \n      showProgress: true,\n      confirmationRequired: true \n    });\n  };\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"phase-3-advanced-features-3-4-hours",children:"Phase 3: Advanced Features (3-4 hours)"}),"\n",(0,s.jsx)(n.h4,{id:"31-multi-modal-input-support",children:"3.1 Multi-Modal Input Support"}),"\n",(0,s.jsx)(n.p,{children:"Add support for voice and gesture inputs:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/agents/input/voice-processor.ts\nexport class VoiceProcessor {\n  private recognition: SpeechRecognition;\n  private nlpProcessor: NLPProcessor;\n\n  constructor() {\n    this.recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n    this.recognition.continuous = false;\n    this.recognition.interimResults = false;\n  }\n\n  async processVoiceCommand(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.recognition.onresult = async (event) => {\n        const transcript = event.results[0][0].transcript;\n        \n        try {\n          const nlpResult = await this.nlpProcessor.classifyIntent(transcript, {\n            inputMode: 'voice'\n          });\n\n          if (nlpResult.confidence > 0.7) {\n            await window.agentActions.execute(nlpResult.intent, nlpResult.parameters);\n          } else {\n            // Request clarification\n            this.requestClarification(transcript, nlpResult);\n          }\n          \n          resolve();\n        } catch (error) {\n          reject(error);\n        }\n      };\n\n      this.recognition.onerror = reject;\n      this.recognition.start();\n    });\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h4,{id:"32-performance-optimization",children:"3.2 Performance Optimization"}),"\n",(0,s.jsx)(n.p,{children:"Implement caching and optimization strategies:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/agents/optimization/cache-manager.ts\nexport class AgentCacheManager {\n  private cache = new Map<string, CacheEntry>();\n  private maxSize = 1000;\n  private ttl = 300000; // 5 minutes\n\n  async get<T>(key: string, factory: () => Promise<T>): Promise<T> {\n    const cached = this.cache.get(key);\n    \n    if (cached && Date.now() - cached.timestamp < this.ttl) {\n      return cached.value as T;\n    }\n\n    const value = await factory();\n    \n    this.cache.set(key, {\n      value,\n      timestamp: Date.now()\n    });\n\n    this.cleanup();\n    return value;\n  }\n\n  private cleanup(): void {\n    if (this.cache.size <= this.maxSize) return;\n\n    const entries = Array.from(this.cache.entries());\n    entries.sort((a, b) => a[1].timestamp - b[1].timestamp);\n    \n    // Remove oldest entries\n    const toRemove = entries.slice(0, entries.length - this.maxSize);\n    toRemove.forEach(([key]) => this.cache.delete(key));\n  }\n}\n\n// Usage in actions\nagentRegistry.register({\n  id: 'searchPhotos',\n  async execute(params) {\n    const cacheKey = `search:${JSON.stringify(params)}`;\n    return await cacheManager.get(cacheKey, () => performSearch(params));\n  }\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"testing-your-agent-native-implementation",children:"Testing Your Agent-Native Implementation"}),"\n",(0,s.jsx)(n.h3,{id:"unit-tests",children:"Unit Tests"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// tests/agent-actions.test.ts\ndescribe('Agent Actions', () => {\n  test('filterPhotos returns expected results', async () => {\n    const result = await window.agentActions.filterPhotos({\n      keywords: ['sunset'],\n      limit: 10\n    });\n\n    expect(result.success).toBe(true);\n    expect(result.data).toBeInstanceOf(Array);\n    expect(result.data.length).toBeLessThanOrEqual(10);\n  });\n\n  test('createAlbum validates required parameters', async () => {\n    await expect(window.agentActions.createAlbum({}))\n      .rejects.toThrow('Name is required');\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"integration-tests",children:"Integration Tests"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// tests/agent-integration.test.ts\ndescribe('Agent Integration', () => {\n  test('natural language processing workflow', async () => {\n    const nlpResult = await window.nlpProcessor.classifyIntent(\n      'Show me sunset photos from last summer'\n    );\n\n    expect(nlpResult.intent).toBe('filterPhotos');\n    expect(nlpResult.parameters.keywords).toContain('sunset');\n\n    const actionResult = await window.agentActions.execute(\n      nlpResult.intent, \n      nlpResult.parameters\n    );\n\n    expect(actionResult.success).toBe(true);\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"deployment-considerations",children:"Deployment Considerations"}),"\n",(0,s.jsx)(n.h3,{id:"performance-monitoring",children:"Performance Monitoring"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/agents/monitoring/performance.ts\nexport class AgentPerformanceMonitor {\n  private metrics: PerformanceMetric[] = [];\n\n  recordAction(actionId: string, duration: number, success: boolean): void {\n    this.metrics.push({\n      actionId,\n      duration,\n      success,\n      timestamp: Date.now()\n    });\n\n    // Send to analytics if needed\n    if (this.metrics.length % 100 === 0) {\n      this.sendMetrics();\n    }\n  }\n\n  getAverageExecutionTime(actionId: string): number {\n    const actionMetrics = this.metrics.filter(m => m.actionId === actionId);\n    return actionMetrics.reduce((sum, m) => sum + m.duration, 0) / actionMetrics.length;\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/agents/security/permissions.ts\nexport class AgentPermissionManager {\n  private permissions = new Map<string, Permission[]>();\n\n  async checkPermission(actionId: string, userId: string, context: any): Promise<boolean> {\n    const requiredPermissions = this.getRequiredPermissions(actionId);\n    const userPermissions = await this.getUserPermissions(userId);\n\n    return requiredPermissions.every(required => \n      userPermissions.some(user => this.permissionMatches(required, user))\n    );\n  }\n\n  private getRequiredPermissions(actionId: string): Permission[] {\n    const action = agentRegistry.get(actionId);\n    return action?.permissions || [];\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices-summary",children:"Best Practices Summary"}),"\n",(0,s.jsx)(n.h3,{id:"1-design-for-dual-use",children:"1. Design for Dual Use"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Every UI interaction should have a programmatic equivalent"}),"\n",(0,s.jsx)(n.li,{children:"Maintain consistent naming between UI and agent actions"}),"\n",(0,s.jsx)(n.li,{children:"Provide rich metadata for agent understanding"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"2-error-handling",children:"2. Error Handling"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Implement graceful fallbacks for low-confidence interpretations"}),"\n",(0,s.jsx)(n.li,{children:"Provide meaningful error messages with suggested corrections"}),"\n",(0,s.jsx)(n.li,{children:"Support multi-turn clarification conversations"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"3-performance",children:"3. Performance"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Cache frequently accessed data and action results"}),"\n",(0,s.jsx)(n.li,{children:"Implement progressive loading for large datasets"}),"\n",(0,s.jsx)(n.li,{children:"Use web workers for intensive processing"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"4-security",children:"4. Security"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Validate all agent inputs thoroughly"}),"\n",(0,s.jsx)(n.li,{children:"Implement proper permission checking"}),"\n",(0,s.jsx)(n.li,{children:"Log all agent actions for audit purposes"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"5-user-experience",children:"5. User Experience"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Provide immediate feedback for agent actions"}),"\n",(0,s.jsx)(n.li,{children:"Show progress for long-running operations"}),"\n",(0,s.jsx)(n.li,{children:"Allow users to undo or modify agent actions"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsx)(n.p,{children:"Once you've implemented the basic agent-native features:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Monitor Usage"}),": Track how agents interact with your application"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Optimize Performance"}),": Identify and optimize slow operations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Expand Actions"}),": Add more sophisticated agent capabilities"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Improve NLP"}),": Train custom models for better intent recognition"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Test with Real Agents"}),": Validate with actual AI assistants and browser agents"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"For more detailed examples and advanced patterns, explore:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/smugmug-api-reference-app/agent-native/action-registry",children:"Action Registry"})," - Complete action reference"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/smugmug-api-reference-app/agent-native/natural-language-api",children:"Natural Language API"})," - Advanced NLP features"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/smugmug-api-reference-app/agent-native/interactive-examples",children:"Interactive Examples"})," - Working demonstrations"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var i=t(6540);const s={},a=i.createContext(s);function r(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);